//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebUI.MvcProjectService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleDto", Namespace="http://schemas.datacontract.org/2004/07/DTO")]
    [System.SerializableAttribute()]
    public partial class RoleDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedOn {
            get {
                return this.ModifiedOnField;
            }
            set {
                if ((this.ModifiedOnField.Equals(value) != true)) {
                    this.ModifiedOnField = value;
                    this.RaisePropertyChanged("ModifiedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfoDto", Namespace="http://schemas.datacontract.org/2004/07/DTO")]
    [System.SerializableAttribute()]
    public partial class UserInfoDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeperatedRolesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeperatedRoles {
            get {
                return this.SeperatedRolesField;
            }
            set {
                if ((object.ReferenceEquals(this.SeperatedRolesField, value) != true)) {
                    this.SeperatedRolesField = value;
                    this.RaisePropertyChanged("SeperatedRoles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="boolean", Namespace="http://schemas.datacontract.org/2004/07/DTO")]
    [System.SerializableAttribute()]
    public partial class boolean : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> MessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebUI.MvcProjectService.ServiceResponseStatuses StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Data {
            get {
                return this.DataField;
            }
            set {
                if ((this.DataField.Equals(value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebUI.MvcProjectService.ServiceResponseStatuses Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceResponseStatuses", Namespace="http://schemas.datacontract.org/2004/07/DTO")]
    public enum ServiceResponseStatuses : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRoleDto", Namespace="http://schemas.datacontract.org/2004/07/DTO")]
    [System.SerializableAttribute()]
    public partial class UserRoleDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedOn {
            get {
                return this.ModifiedOnField;
            }
            set {
                if ((this.ModifiedOnField.Equals(value) != true)) {
                    this.ModifiedOnField = value;
                    this.RaisePropertyChanged("ModifiedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((this.RoleIdField.Equals(value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleName {
            get {
                return this.RoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleNameField, value) != true)) {
                    this.RoleNameField = value;
                    this.RaisePropertyChanged("RoleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MvcProjectService.IWcfService")]
    public interface IWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoleById", ReplyAction="http://tempuri.org/IRoleService/GetRoleByIdResponse")]
        WebUI.MvcProjectService.RoleDto GetRoleById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoleById", ReplyAction="http://tempuri.org/IRoleService/GetRoleByIdResponse")]
        System.Threading.Tasks.Task<WebUI.MvcProjectService.RoleDto> GetRoleByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoleAll", ReplyAction="http://tempuri.org/IRoleService/GetRoleAllResponse")]
        WebUI.MvcProjectService.RoleDto[] GetRoleAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoleAll", ReplyAction="http://tempuri.org/IRoleService/GetRoleAllResponse")]
        System.Threading.Tasks.Task<WebUI.MvcProjectService.RoleDto[]> GetRoleAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/InsertRole", ReplyAction="http://tempuri.org/IRoleService/InsertRoleResponse")]
        System.Collections.Generic.KeyValuePair<bool, string> InsertRole(WebUI.MvcProjectService.RoleDto roleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/InsertRole", ReplyAction="http://tempuri.org/IRoleService/InsertRoleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<bool, string>> InsertRoleAsync(WebUI.MvcProjectService.RoleDto roleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/RemoveRole", ReplyAction="http://tempuri.org/IRoleService/RemoveRoleResponse")]
        bool RemoveRole(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/RemoveRole", ReplyAction="http://tempuri.org/IRoleService/RemoveRoleResponse")]
        System.Threading.Tasks.Task<bool> RemoveRoleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/UpdateRole", ReplyAction="http://tempuri.org/IRoleService/UpdateRoleResponse")]
        bool UpdateRole(WebUI.MvcProjectService.RoleDto roleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/UpdateRole", ReplyAction="http://tempuri.org/IRoleService/UpdateRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateRoleAsync(WebUI.MvcProjectService.RoleDto roleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/GetUserInfoById", ReplyAction="http://tempuri.org/IUserInfoService/GetUserInfoByIdResponse")]
        WebUI.MvcProjectService.UserInfoDto GetUserInfoById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/GetUserInfoById", ReplyAction="http://tempuri.org/IUserInfoService/GetUserInfoByIdResponse")]
        System.Threading.Tasks.Task<WebUI.MvcProjectService.UserInfoDto> GetUserInfoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/GetUserInfoAll", ReplyAction="http://tempuri.org/IUserInfoService/GetUserInfoAllResponse")]
        WebUI.MvcProjectService.UserInfoDto[] GetUserInfoAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/GetUserInfoAll", ReplyAction="http://tempuri.org/IUserInfoService/GetUserInfoAllResponse")]
        System.Threading.Tasks.Task<WebUI.MvcProjectService.UserInfoDto[]> GetUserInfoAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/InsertUserInfo", ReplyAction="http://tempuri.org/IUserInfoService/InsertUserInfoResponse")]
        WebUI.MvcProjectService.boolean InsertUserInfo(WebUI.MvcProjectService.UserInfoDto userInfoDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/InsertUserInfo", ReplyAction="http://tempuri.org/IUserInfoService/InsertUserInfoResponse")]
        System.Threading.Tasks.Task<WebUI.MvcProjectService.boolean> InsertUserInfoAsync(WebUI.MvcProjectService.UserInfoDto userInfoDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/RemoveUserInfo", ReplyAction="http://tempuri.org/IUserInfoService/RemoveUserInfoResponse")]
        bool RemoveUserInfo(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/RemoveUserInfo", ReplyAction="http://tempuri.org/IUserInfoService/RemoveUserInfoResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserInfoAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/UpdateUserInfo", ReplyAction="http://tempuri.org/IUserInfoService/UpdateUserInfoResponse")]
        bool UpdateUserInfo(WebUI.MvcProjectService.UserInfoDto userInfoDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInfoService/UpdateUserInfo", ReplyAction="http://tempuri.org/IUserInfoService/UpdateUserInfoResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserInfoAsync(WebUI.MvcProjectService.UserInfoDto userInfoDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/GetUserRoleById", ReplyAction="http://tempuri.org/IUserRoleService/GetUserRoleByIdResponse")]
        WebUI.MvcProjectService.UserRoleDto GetUserRoleById(int id, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/GetUserRoleById", ReplyAction="http://tempuri.org/IUserRoleService/GetUserRoleByIdResponse")]
        System.Threading.Tasks.Task<WebUI.MvcProjectService.UserRoleDto> GetUserRoleByIdAsync(int id, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/GetUserRoleAll", ReplyAction="http://tempuri.org/IUserRoleService/GetUserRoleAllResponse")]
        WebUI.MvcProjectService.UserRoleDto[] GetUserRoleAll(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/GetUserRoleAll", ReplyAction="http://tempuri.org/IUserRoleService/GetUserRoleAllResponse")]
        System.Threading.Tasks.Task<WebUI.MvcProjectService.UserRoleDto[]> GetUserRoleAllAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/InsertUserRole", ReplyAction="http://tempuri.org/IUserRoleService/InsertUserRoleResponse")]
        System.Collections.Generic.KeyValuePair<bool, string> InsertUserRole(WebUI.MvcProjectService.UserRoleDto userRoleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/InsertUserRole", ReplyAction="http://tempuri.org/IUserRoleService/InsertUserRoleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<bool, string>> InsertUserRoleAsync(WebUI.MvcProjectService.UserRoleDto userRoleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/RemoveUserRole", ReplyAction="http://tempuri.org/IUserRoleService/RemoveUserRoleResponse")]
        bool RemoveUserRole(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/RemoveUserRole", ReplyAction="http://tempuri.org/IUserRoleService/RemoveUserRoleResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserRoleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/UpdateUserRole", ReplyAction="http://tempuri.org/IUserRoleService/UpdateUserRoleResponse")]
        bool UpdateUserRole(WebUI.MvcProjectService.UserRoleDto roleDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRoleService/UpdateUserRole", ReplyAction="http://tempuri.org/IUserRoleService/UpdateUserRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserRoleAsync(WebUI.MvcProjectService.UserRoleDto roleDto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceChannel : WebUI.MvcProjectService.IWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfServiceClient : System.ServiceModel.ClientBase<WebUI.MvcProjectService.IWcfService>, WebUI.MvcProjectService.IWcfService {
        
        public WcfServiceClient() {
        }
        
        public WcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebUI.MvcProjectService.RoleDto GetRoleById(int id) {
            return base.Channel.GetRoleById(id);
        }
        
        public System.Threading.Tasks.Task<WebUI.MvcProjectService.RoleDto> GetRoleByIdAsync(int id) {
            return base.Channel.GetRoleByIdAsync(id);
        }
        
        public WebUI.MvcProjectService.RoleDto[] GetRoleAll() {
            return base.Channel.GetRoleAll();
        }
        
        public System.Threading.Tasks.Task<WebUI.MvcProjectService.RoleDto[]> GetRoleAllAsync() {
            return base.Channel.GetRoleAllAsync();
        }
        
        public System.Collections.Generic.KeyValuePair<bool, string> InsertRole(WebUI.MvcProjectService.RoleDto roleDto) {
            return base.Channel.InsertRole(roleDto);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<bool, string>> InsertRoleAsync(WebUI.MvcProjectService.RoleDto roleDto) {
            return base.Channel.InsertRoleAsync(roleDto);
        }
        
        public bool RemoveRole(int id) {
            return base.Channel.RemoveRole(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveRoleAsync(int id) {
            return base.Channel.RemoveRoleAsync(id);
        }
        
        public bool UpdateRole(WebUI.MvcProjectService.RoleDto roleDto) {
            return base.Channel.UpdateRole(roleDto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRoleAsync(WebUI.MvcProjectService.RoleDto roleDto) {
            return base.Channel.UpdateRoleAsync(roleDto);
        }
        
        public WebUI.MvcProjectService.UserInfoDto GetUserInfoById(int id) {
            return base.Channel.GetUserInfoById(id);
        }
        
        public System.Threading.Tasks.Task<WebUI.MvcProjectService.UserInfoDto> GetUserInfoByIdAsync(int id) {
            return base.Channel.GetUserInfoByIdAsync(id);
        }
        
        public WebUI.MvcProjectService.UserInfoDto[] GetUserInfoAll() {
            return base.Channel.GetUserInfoAll();
        }
        
        public System.Threading.Tasks.Task<WebUI.MvcProjectService.UserInfoDto[]> GetUserInfoAllAsync() {
            return base.Channel.GetUserInfoAllAsync();
        }
        
        public WebUI.MvcProjectService.boolean InsertUserInfo(WebUI.MvcProjectService.UserInfoDto userInfoDto) {
            return base.Channel.InsertUserInfo(userInfoDto);
        }
        
        public System.Threading.Tasks.Task<WebUI.MvcProjectService.boolean> InsertUserInfoAsync(WebUI.MvcProjectService.UserInfoDto userInfoDto) {
            return base.Channel.InsertUserInfoAsync(userInfoDto);
        }
        
        public bool RemoveUserInfo(int Id) {
            return base.Channel.RemoveUserInfo(Id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserInfoAsync(int Id) {
            return base.Channel.RemoveUserInfoAsync(Id);
        }
        
        public bool UpdateUserInfo(WebUI.MvcProjectService.UserInfoDto userInfoDto) {
            return base.Channel.UpdateUserInfo(userInfoDto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserInfoAsync(WebUI.MvcProjectService.UserInfoDto userInfoDto) {
            return base.Channel.UpdateUserInfoAsync(userInfoDto);
        }
        
        public WebUI.MvcProjectService.UserRoleDto GetUserRoleById(int id, int userId) {
            return base.Channel.GetUserRoleById(id, userId);
        }
        
        public System.Threading.Tasks.Task<WebUI.MvcProjectService.UserRoleDto> GetUserRoleByIdAsync(int id, int userId) {
            return base.Channel.GetUserRoleByIdAsync(id, userId);
        }
        
        public WebUI.MvcProjectService.UserRoleDto[] GetUserRoleAll(int userId) {
            return base.Channel.GetUserRoleAll(userId);
        }
        
        public System.Threading.Tasks.Task<WebUI.MvcProjectService.UserRoleDto[]> GetUserRoleAllAsync(int userId) {
            return base.Channel.GetUserRoleAllAsync(userId);
        }
        
        public System.Collections.Generic.KeyValuePair<bool, string> InsertUserRole(WebUI.MvcProjectService.UserRoleDto userRoleDto) {
            return base.Channel.InsertUserRole(userRoleDto);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<bool, string>> InsertUserRoleAsync(WebUI.MvcProjectService.UserRoleDto userRoleDto) {
            return base.Channel.InsertUserRoleAsync(userRoleDto);
        }
        
        public bool RemoveUserRole(int id) {
            return base.Channel.RemoveUserRole(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserRoleAsync(int id) {
            return base.Channel.RemoveUserRoleAsync(id);
        }
        
        public bool UpdateUserRole(WebUI.MvcProjectService.UserRoleDto roleDto) {
            return base.Channel.UpdateUserRole(roleDto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserRoleAsync(WebUI.MvcProjectService.UserRoleDto roleDto) {
            return base.Channel.UpdateUserRoleAsync(roleDto);
        }
    }
}
